TITLE Mod file for component: Component(id=Na_NML2 type=MOD_Na_NML2)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.2.0
         org.neuroml.model   v1.1.0
         jLEMS               v0.9.5.2

ENDCOMMENT

NEURON {
    SUFFIX Na_NML2
    USEION na READ ena WRITE ina
    
    RANGE gmax                             : Will be set when ion channel mechanism placed on cell!
    
    RANGE conductance                      : parameter
    RANGE g                                : exposure
    RANGE fopen                            : exposure
    RANGE m_instances                      : parameter
    RANGE m_alpha                          : exposure
    RANGE m_beta                           : exposure
    RANGE m_tau                            : exposure
    RANGE m_inf                            : exposure
    RANGE m_rateScale                      : exposure
    RANGE m_fcond                          : exposure
    RANGE m_q10Settings_q10Factor          : parameter
    RANGE m_q10Settings_experimentalTemp   : parameter
    RANGE m_q10Settings_q10                : exposure
    RANGE m_reverseRate_rate               : parameter
    RANGE m_reverseRate_midpoint           : parameter
    RANGE m_reverseRate_scale              : parameter
    RANGE m_reverseRate_r                  : exposure
    RANGE m_forwardRate_rate               : parameter
    RANGE m_forwardRate_midpoint           : parameter
    RANGE m_forwardRate_scale              : parameter
    RANGE m_forwardRate_r                  : exposure
    RANGE h_instances                      : parameter
    RANGE h_alpha                          : exposure
    RANGE h_beta                           : exposure
    RANGE h_tau                            : exposure
    RANGE h_inf                            : exposure
    RANGE h_rateScale                      : exposure
    RANGE h_fcond                          : exposure
    RANGE h_q10Settings_q10Factor          : parameter
    RANGE h_q10Settings_experimentalTemp   : parameter
    RANGE h_q10Settings_q10                : exposure
    RANGE h_reverseRate_rate               : parameter
    RANGE h_reverseRate_midpoint           : parameter
    RANGE h_reverseRate_scale              : parameter
    RANGE h_reverseRate_r                  : exposure
    RANGE h_forwardRate_rate               : parameter
    RANGE h_forwardRate_midpoint           : parameter
    RANGE h_forwardRate_scale              : parameter
    RANGE h_forwardRate_r                  : exposure
    RANGE m_forwardRate_x                  : derived var
    
    RANGE conductanceScale                 : derived var
    
    RANGE fopenHHrates                     : derived var
    
    RANGE fopenHHtauInf                    : derived var
    
    RANGE fopenHHratesTau                  : derived var
    
    RANGE fopenHHratesInf                  : derived var
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (mM) = (millimolar)
    (um) = (micrometer)
    
}

PARAMETER {
    
    gmax = 0                                : Will be set when ion channel mechanism placed on cell!
    
    conductance = 1.0E-5 (uS)
    m_instances = 3 
    m_q10Settings_q10Factor = 3 
    m_q10Settings_experimentalTemp = 279.45 (K)
    m_reverseRate_rate = 4 (megahertz)
    m_reverseRate_midpoint = -65 (mV)
    m_reverseRate_scale = -18 (mV)
    m_forwardRate_rate = 1 (megahertz)
    m_forwardRate_midpoint = -40 (mV)
    m_forwardRate_scale = 10 (mV)
    h_instances = 1 
    h_q10Settings_q10Factor = 3 
    h_q10Settings_experimentalTemp = 279.45 (K)
    h_reverseRate_rate = 1 (megahertz)
    h_reverseRate_midpoint = -35 (mV)
    h_reverseRate_scale = 10 (mV)
    h_forwardRate_rate = 0.07 (megahertz)
    h_forwardRate_midpoint = -65 (mV)
    h_forwardRate_scale = -20 (mV)
}

ASSIGNED {
    ? Standard Assigned variables with ionChannel
    v (mV)
    celsius (degC)
    temperature (K)
    ena (mV)
    ina (mA/cm2)
    
    
    m_q10Settings_q10                      : derived var
    
    m_reverseRate_r (megahertz)            : derived var
    
    m_forwardRate_x                        : derived var
    
    m_forwardRate_r (megahertz)            : derived var
    
    m_rateScale                            : derived var
    
    m_alpha (megahertz)                    : derived var
    
    m_beta (megahertz)                     : derived var
    
    m_fcond                                : derived var
    
    m_inf                                  : derived var
    
    m_tau (ms)                             : derived var
    
    h_q10Settings_q10                      : derived var
    
    h_reverseRate_r (megahertz)            : derived var
    
    h_forwardRate_r (megahertz)            : derived var
    
    h_rateScale                            : derived var
    
    h_alpha (megahertz)                    : derived var
    
    h_beta (megahertz)                     : derived var
    
    h_fcond                                : derived var
    
    h_inf                                  : derived var
    
    h_tau (ms)                             : derived var
    
    conductanceScale                       : derived var
    
    fopenHHrates                           : derived var
    
    fopenHHtauInf                          : derived var
    
    fopenHHratesTau                        : derived var
    
    fopenHHratesInf                        : derived var
    
    fopen                                  : derived var
    
    g (uS)                                 : derived var
    rate_m_q (/ms)
    rate_h_q (/ms)
    
}

STATE {
    m_q 
    h_q 
    
}

INITIAL {
    rates()
    
    temperature = celsius + 273.15
    
    m_q = m_inf
    
    h_q = h_inf
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    conductanceScale = 1 ? evaluable
    
    ? DerivedVariable is based on path: gatesHHrates[*]/fcond from gatesHHrates: Component(id=m type=gateHHrates)
    fopenHHrates = m_fcond * h_fcond ? multiply applied to all instances of fcond in gatesHHrates ? path
    
    ? DerivedVariable is based on path: gatesHHtauInf[*]/fcond from gatesHHtauInf: null
    ? Path not present in component, using factor: 1
    
    fopenHHtauInf = 1 
    
    ? DerivedVariable is based on path: gatesHHratesTau[*]/fcond from gatesHHratesTau: null
    ? Path not present in component, using factor: 1
    
    fopenHHratesTau = 1 
    
    ? DerivedVariable is based on path: gatesHHratesInf[*]/fcond from gatesHHratesInf: null
    ? Path not present in component, using factor: 1
    
    fopenHHratesInf = 1 
    
    fopen = conductanceScale  *  fopenHHrates  *  fopenHHtauInf  *  fopenHHratesTau  *  fopenHHratesInf ? evaluable
    
    g = conductance  *  fopen ? evaluable
    
    g = gmax * fopen     : Overwriting evaluation of g, assuming gmax set externally
    
    ina = g * (v - ena)
    
}

DERIVATIVE states {
    rates()
    m_q' = rate_m_q 
    h_q' = rate_h_q 
    
}

PROCEDURE rates() {
    
    m_q10Settings_q10 = m_q10Settings_q10Factor ^((temperature -  m_q10Settings_experimentalTemp )/10) ? evaluable
    
    m_reverseRate_r = m_reverseRate_rate  * exp((v -  m_reverseRate_midpoint )/ m_reverseRate_scale ) ? evaluable
    
    m_forwardRate_x = (v -  m_forwardRate_midpoint ) /  m_forwardRate_scale ? evaluable
    
    m_forwardRate_r = m_forwardRate_rate  *  m_forwardRate_x  / (1 - exp(0 -  m_forwardRate_x )) ? evaluable
    
    ? DerivedVariable is based on path: q10Settings/q10 from q10Settings: Component(id=null type=q10ExpTemp)
    m_rateScale = m_q10Settings_q10 ? path
    
    ? DerivedVariable is based on path: forwardRate/r from forwardRate: Component(id=null type=HHExpLinearRate)
    m_alpha = m_forwardRate_r ? path
    
    ? DerivedVariable is based on path: reverseRate/r from reverseRate: Component(id=null type=HHExpRate)
    m_beta = m_reverseRate_r ? path
    
    m_fcond = m_q ^ m_instances ? evaluable
    
    m_inf = m_alpha /( m_alpha + m_beta ) ? evaluable
    
    m_tau = 1/(( m_alpha + m_beta ) *  m_rateScale ) ? evaluable
    
    h_q10Settings_q10 = h_q10Settings_q10Factor ^((temperature -  h_q10Settings_experimentalTemp )/10) ? evaluable
    
    h_reverseRate_r = h_reverseRate_rate  / (1 + exp(0 - (v -  h_reverseRate_midpoint )/ h_reverseRate_scale )) ? evaluable
    
    h_forwardRate_r = h_forwardRate_rate  * exp((v -  h_forwardRate_midpoint )/ h_forwardRate_scale ) ? evaluable
    
    ? DerivedVariable is based on path: q10Settings/q10 from q10Settings: Component(id=null type=q10ExpTemp)
    h_rateScale = h_q10Settings_q10 ? path
    
    ? DerivedVariable is based on path: forwardRate/r from forwardRate: Component(id=null type=HHExpRate)
    h_alpha = h_forwardRate_r ? path
    
    ? DerivedVariable is based on path: reverseRate/r from reverseRate: Component(id=null type=HHSigmoidRate)
    h_beta = h_reverseRate_r ? path
    
    h_fcond = h_q ^ h_instances ? evaluable
    
    h_inf = h_alpha /( h_alpha + h_beta ) ? evaluable
    
    h_tau = 1/(( h_alpha + h_beta ) *  h_rateScale ) ? evaluable
    
    
     
    rate_m_q = ( m_inf  -  m_q ) /  m_tau 
    
     
    
     
    
     
    
     
    rate_h_q = ( h_inf  -  h_q ) /  h_tau 
    
     
    
     
    
     
    
     
    
}

